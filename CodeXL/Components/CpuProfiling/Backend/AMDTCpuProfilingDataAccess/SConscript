# -*- Python -*-

Import('*')
from CXL_init import *

libName = "CXLCpuProfilingDataAccess"

env = CXL_env.Clone()

env_no_c11 = CXL_env.Clone()

# Remove the c++ flag for the env_no_c11 library
fullBuildFlags = env_no_c11['CPPFLAGS']
partBuildString = fullBuildFlags.replace('-std=c++11','')
env_no_c11.Replace( CPPFLAGS = partBuildString)

env.Append( CPPPATH = [ 
	".",
	"inc",
	"..",
	env['CXL_common_dir'] + '/Src',
	env['CXL_common_dir'] + '/../CodeXL/Components/CpuProfiling/Backend',
	env['CXL_common_dir'] + '/../CodeXL/Components/CpuProfiling',
	env['CXL_common_dir'] + '/../CodeXL/Components/DatabaseLayer',
])

env_no_c11.Append( CPPPATH = [ 
	".",
	"inc",
	"..",
	env['CXL_commonproj_dir'],
])

UseQt4(env)

# There are uses of %llx in some spots
env.Append(CPPFLAGS = '-fno-strict-aliasing')

env.Append (LIBS = [
	"CXLBaseTools",
	"CXLOSWrappers",
    "CXLDbAdapter",
    "CXLProfilerDAL",
    "CXLCpuPerfEventUtils",
    "CXLExecutableFormat",
    "CXLDisassembler",
])

sources = \
[
	"src/AMDTCpuProfilingDataAccess.cpp",
]

# Creating object files	
objFiles = env.SharedObject(sources)

# Creating shared libraries
soFiles = env.SharedLibrary(
	target = libName, 
	source = objFiles)

# Installing libraries
libInstall = env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (soFiles))

Return('libInstall')
