# -*- Python -*-

Import ('*')
from CXL_init import *

appName = "CodeXLCpuProfiler-bin"

env = CXL_env.Clone()
initBoost(env)
UseBoost(env)
compiler_base_flags = "-D_LINUX -DLINUX -Wall -Werror -Wextra -g -fmessage-length=0 -Wno-unknown-pragmas -pthread -std=c++11 -DGDT_BUILD_SUFFIX="

if (env['CXL_build'] == 'debug'):
    compiler_base_flags += ' -D_DEBUG -D_LINUX '
else:
    compiler_base_flags += ' -O3 -DNDEBUG -D_LINUX '

if (env['CXL_build_conf'] == 'PUBLIC'):
        compiler_base_flags += ' -DGDT_PUBLIC '
elif (env['CXL_build_conf'] == 'NDA'):
        compiler_base_flags += ' -DGDT_NDA '
elif (env['CXL_build_conf'] == 'INTERNAL'):
        compiler_base_flags += ' -DGDT_INTERNAL '
else:
        compiler_base_flags += ' -DGDT_PUBLIC '

env.Replace(CPPFLAGS = compiler_base_flags)

linker_flags = " -Wl,-rpath,'$$ORIGIN' "
env.Append(LINKFLAGS = linker_flags)

# Include path
env.Append( CPPPATH = [
    ".",
    "./inc",
    "./src/",
    "./src/",
    env['CXL_common_dir'] + '/../CodeXL/Components/CpuProfiling/Backend',
    env['CXL_common_dir'] + '/../CodeXL/Components/CpuProfiling/',
    env['CXL_common_dir'] + '/../CodeXL/Components/ThreadProfiling/Backend/AMDTThreadProfileAPI/inc',
    env['CXL_commonproj_dir'],
    env['CXL_commonproj_dir'] + "/AMDTCommonHeaders",
])

UseQt4(env)

# Source Files
sources = \
[
    "src/AMDTCpuProfilingCLI.cpp",
    "src/ParseArgs.cpp",
    "src/Collect.cpp",
    "src/Utils.cpp",
    "src/Report.cpp",
    "src/Reporter.cpp",
    "src/CGCallback.cpp",
]

# Dependent libraries
env.Append(LIBS = [
    "CXLDisassembler",
    "CXLExecutableFormat",
    "CXLCpuPerfEventUtils",
    "CXLCpuCallstackSampling",
    "CXLThreadProfileAPI",
    "CXLProfilingAgentsData",
    "CXLCpuProfilingTranslation",
    "CXLCpuProfilingRawData",
    "CXLCpuProfilingControl",
    "CXLProfilerDAL",
    "CXLDbAdapter",
    "CXLBaseTools",
    "CXLOSWrappers",
    "libpthread",
    "libboost_filesystem",
    "libboost_wave",
    "libboost_system",
    "libboost_thread",
    "libboost_date_time"
])

resources = \
[
    "LinuxResources/CodeXLCpuProfiler"
]

# Creating object files
objFiles = env.SharedObject(sources)

# Creating shared libraries
exe = env.Program(
    target = appName,
    source = objFiles)

# Installing libraries
libInstall = env.Install(
    dir = env['CXL_lib_dir'],
    source = (exe))

libInstall += env.Install(
    dir = env['CXL_lib_dir'],
    source = (resources))

Return('libInstall')
