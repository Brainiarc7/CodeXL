# -*- Python -*-

from CXL_init import *

Import('*')

libName = "CXLHsaServer"

env = CXL_env.Clone()

initLibDwarf (env)
initLibElf (env)
# initAMDOpenCL(env)

env.Append( CPPPATH = [ 
	".",
	"..",
	env['CXL_commonproj_dir'],
	env['CXL_commonproj_dir'] + "/AMDTOSWrappers/Include",
	env['CXL_common_dir'] + "/Lib/AMD/HWDebugger/HwDbg/1.3/Include",
	env['CXL_common_dir'] + "/Lib/AMD/HWDebugger/HwDbgFacilities/1.0/Include",
	env['CXL_common_dir'] + "/Lib/AMD/HSA/STGFoundation/hsa/include",
	"/opt/rocm/hsa/include" # Update location of new release of rocm
])

env.Append(LIBPATH = [
	env['CXL_common_dir'] + "/Lib/AMD/HWDebugger/HwDbg/1.3/Lib/x64/",
	env['CXL_common_dir'] + "/Lib/AMD/HWDebugger/HwDbgFacilities/1.0/Lib/x64/",
	env['CXL_common_dir'] + "/Lib/AMD/HSA/STGFoundation/hsa/lib/x86_64/",
	"/opt/rocm/hsa/lib" # Update location of new release of rocm
])

UseAPPSDK(env);

env.Append( CPPDEFINES = [
	"_AMDT_HSASERVER_EXPORTS",
	"AMD_INTERNAL_BUILD",
])

sources = \
[
	"src/hsAPIFunctionsStubs.cpp",
	"src/hsAPIFunctionsImplementations.cpp",
	"src/hsDebuggingManager.cpp",
	"src/hsDebugInfo.cpp",
	"src/hsHSAMonitor.cpp",
	"src/hsModuleInitializer.cpp",
	"src/hsSingletonsDelete.cpp",
]

env.Prepend( LIBS =
[
	"CXLBaseTools",
	"CXLOSWrappers",
	"CXLAPIClasses",
	"CXLServerUtilities",
	"AMDGPUDebugHSA-x64",
	"AMDHwDbgFacilities-x64",
	":libhsa-runtime-tools64.so.1",
])

#env.Prepend( LINKFLAGS =
#[
#	"-Wl,-soname=libCXLHsaServer.so"
#])

# Creating object files	
objFiles = env.SharedObject(sources)

# Creating shared libraries
soFiles = env.SharedLibrary(
	target = libName, 
	source = objFiles)

# Installing libraries
libInstall = env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (soFiles))

Return('libInstall')
