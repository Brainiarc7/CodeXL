//==============================================================================
// Copyright (c) 2015-2016 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief THIS CODE WAS AUTOGENERATED BY PASSTHROUGHGENERATOR ON 05/18/16
//==============================================================================

#include <hsa_ext_profiler.h>

#include "Logger.h"
#include "GlobalSettings.h"
#include "OSUtils.h"
#include "HSAToolsRTModule.h"
#include "HSARTModuleLoader.h"
#include "../HSAFdnAPIInfoManager.h"
#include "../HSATraceInterceptionHelpers.h"

#include "HSACoreAPITraceClasses.h"
#include "HSAImageExtensionAPITraceClasses.h"
#include "HSAFinalizerExtensionAPITraceClasses.h"
#include "HSAAMDExtensionAPITraceClasses.h"

#include "HSATraceInterception.h"

ApiTable* g_realHSAFunctions = nullptr;
ExtTable* g_realHSAExtFunctions = nullptr;

hsa_status_t HSA_API_Trace_hsa_status_string(hsa_status_t status, const char** status_string)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_status_string_fn(status, status_string);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_status_string* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_status_string();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        status,
        status_string,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_init()
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_init_fn();
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_init* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_init();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_shut_down()
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_shut_down_fn();
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_shut_down* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_shut_down();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_system_get_info(hsa_system_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_system_get_info_fn(attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_system_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_system_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_system_extension_supported(uint16_t extension, uint16_t version_major, uint16_t version_minor, bool* result)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_system_extension_supported_fn(extension, version_major, version_minor, result);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_system_extension_supported* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_system_extension_supported();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        extension,
        version_major,
        version_minor,
        result,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_system_get_extension_table(uint16_t extension, uint16_t version_major, uint16_t version_minor, void* table)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_system_get_extension_table_fn(extension, version_major, version_minor, table);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_system_get_extension_table* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_system_get_extension_table();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        extension,
        version_major,
        version_minor,
        table,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_agent_get_info(hsa_agent_t agent, hsa_agent_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_agent_get_info_fn(agent, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_agent_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_agent_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_iterate_agents(hsa_status_t (*callback)(hsa_agent_t agent, void* data), void* data)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_iterate_agents_fn(callback, data);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_iterate_agents* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_iterate_agents();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        callback,
        data,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_agent_get_exception_policies(hsa_agent_t agent, hsa_profile_t profile, uint16_t* mask)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_agent_get_exception_policies_fn(agent, profile, mask);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_agent_get_exception_policies* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_agent_get_exception_policies();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        profile,
        mask,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_agent_extension_supported(uint16_t extension, hsa_agent_t agent, uint16_t version_major, uint16_t version_minor, bool* result)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_agent_extension_supported_fn(extension, agent, version_major, version_minor, result);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_agent_extension_supported* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_agent_extension_supported();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        extension,
        agent,
        version_major,
        version_minor,
        result,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_signal_create(hsa_signal_value_t initial_value, uint32_t num_consumers, const hsa_agent_t* consumers, hsa_signal_t* signal)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_signal_create_fn(initial_value, num_consumers, consumers, signal);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        initial_value,
        num_consumers,
        consumers,
        signal,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_signal_destroy(hsa_signal_t signal)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_signal_destroy_fn(signal);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_load_acquire(hsa_signal_t signal)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_load_acquire_fn(signal);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_load_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_load_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_load_relaxed(hsa_signal_t signal)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_load_relaxed_fn(signal);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_load_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_load_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

void HSA_API_Trace_hsa_signal_store_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_store_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_store_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_store_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_store_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_store_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_store_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_store_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_exchange_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_exchange_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_exchange_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_exchange_acq_rel();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_exchange_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_exchange_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_exchange_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_exchange_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_exchange_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_exchange_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_exchange_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_exchange_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_exchange_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_exchange_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_exchange_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_exchange_release();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_cas_acq_rel(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_cas_acq_rel_fn(signal, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_cas_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_cas_acq_rel();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_cas_acquire(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_cas_acquire_fn(signal, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_cas_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_cas_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_cas_relaxed(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_cas_relaxed_fn(signal, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_cas_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_cas_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_cas_release(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_cas_release_fn(signal, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_cas_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_cas_release();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

void HSA_API_Trace_hsa_signal_add_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_add_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_add_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_add_acq_rel();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_add_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_add_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_add_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_add_acquire();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_add_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_add_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_add_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_add_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_add_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_add_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_add_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_add_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_subtract_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_subtract_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_subtract_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_subtract_acq_rel();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_subtract_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_subtract_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_subtract_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_subtract_acquire();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_subtract_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_subtract_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_subtract_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_subtract_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_subtract_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_subtract_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_subtract_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_subtract_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_and_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_and_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_and_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_and_acq_rel();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_and_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_and_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_and_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_and_acquire();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_and_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_and_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_and_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_and_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_and_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_and_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_and_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_and_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_or_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_or_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_or_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_or_acq_rel();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_or_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_or_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_or_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_or_acquire();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_or_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_or_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_or_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_or_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_or_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_or_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_or_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_or_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_xor_acq_rel(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_xor_acq_rel_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_xor_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_xor_acq_rel();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_xor_acquire(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_xor_acquire_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_xor_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_xor_acquire();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_xor_relaxed(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_xor_relaxed_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_xor_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_xor_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_signal_xor_release(hsa_signal_t signal, hsa_signal_value_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_signal_xor_release_fn(signal, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_xor_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_xor_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_wait_acquire(hsa_signal_t signal, hsa_signal_condition_t condition, hsa_signal_value_t compare_value, uint64_t timeout_hint, hsa_wait_state_t wait_state_hint)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_wait_acquire_fn(signal, condition, compare_value, timeout_hint, wait_state_hint);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_wait_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_wait_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        condition,
        compare_value,
        timeout_hint,
        wait_state_hint,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_signal_value_t HSA_API_Trace_hsa_signal_wait_relaxed(hsa_signal_t signal, hsa_signal_condition_t condition, hsa_signal_value_t compare_value, uint64_t timeout_hint, hsa_wait_state_t wait_state_hint)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_signal_value_t retVal = g_realHSAFunctions->hsa_signal_wait_relaxed_fn(signal, condition, compare_value, timeout_hint, wait_state_hint);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_signal_wait_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_signal_wait_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        signal,
        condition,
        compare_value,
        timeout_hint,
        wait_state_hint,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_queue_create(hsa_agent_t agent, uint32_t size, hsa_queue_type_t type, void (*callback)(hsa_status_t status, hsa_queue_t* source, void* data), void* data, uint32_t private_segment_size, uint32_t group_segment_size, hsa_queue_t** queue)
{
    ULONGLONG ullStart = 0ull;
    ULONGLONG ullEnd = 0ull;
    hsa_status_t retVal = HSA_STATUS_ERROR;

    HSAToolsRTModule* pToolsRTModule = HSARTModuleLoader<HSAToolsRTModule>::Instance()->GetHSARTModule();

    if (pToolsRTModule->IsModuleLoaded())
    {
        ullStart = OSUtils::Instance()->GetTimeNanos();
        retVal = pToolsRTModule->ext_tools_queue_create_profiled(agent, size, type, callback, data, private_segment_size, group_segment_size, queue);
        ullEnd = OSUtils::Instance()->GetTimeNanos();
    }

    if (HSA_STATUS_SUCCESS != retVal)
    {
        ullStart = OSUtils::Instance()->GetTimeNanos();
        retVal = g_realHSAFunctions->hsa_queue_create_fn(agent, size, type, callback, data, private_segment_size, group_segment_size, queue);
        ullEnd = OSUtils::Instance()->GetTimeNanos();
    }

    HSA_APITrace_hsa_queue_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        size,
        type,
        callback,
        data,
        private_segment_size,
        group_segment_size,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
    HSA_APITrace_hsa_queue_create_PostCallHelper(retVal, agent, size, type, callback, data, private_segment_size, group_segment_size, queue);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_soft_queue_create(hsa_region_t region, uint32_t size, hsa_queue_type_t type, uint32_t features, hsa_signal_t doorbell_signal, hsa_queue_t** queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_soft_queue_create_fn(region, size, type, features, doorbell_signal, queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_soft_queue_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_soft_queue_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        region,
        size,
        type,
        features,
        doorbell_signal,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_queue_destroy(hsa_queue_t* queue)
{
    hsa_queue_t temp_queue;

    if (nullptr != queue)
    {
        memcpy(&temp_queue, queue, sizeof(hsa_queue_t));
    }

    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_queue_destroy_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        nullptr != queue ? &temp_queue : queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_queue_inactivate(hsa_queue_t* queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_queue_inactivate_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_inactivate* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_inactivate();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_load_read_index_acquire(const hsa_queue_t* queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_load_read_index_acquire_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_load_read_index_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_load_read_index_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_load_read_index_relaxed(const hsa_queue_t* queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_load_read_index_relaxed_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_load_read_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_load_read_index_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_load_write_index_acquire(const hsa_queue_t* queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_load_write_index_acquire_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_load_write_index_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_load_write_index_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_load_write_index_relaxed(const hsa_queue_t* queue)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_load_write_index_relaxed_fn(queue);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_load_write_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_load_write_index_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

void HSA_API_Trace_hsa_queue_store_write_index_relaxed(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_queue_store_write_index_relaxed_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_store_write_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_store_write_index_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_queue_store_write_index_release(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_queue_store_write_index_release_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_store_write_index_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_store_write_index_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

uint64_t HSA_API_Trace_hsa_queue_cas_write_index_acq_rel(const hsa_queue_t* queue, uint64_t expected, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_cas_write_index_acq_rel_fn(queue, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_cas_write_index_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_cas_write_index_acq_rel();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_cas_write_index_acquire(const hsa_queue_t* queue, uint64_t expected, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_cas_write_index_acquire_fn(queue, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_cas_write_index_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_cas_write_index_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_cas_write_index_relaxed(const hsa_queue_t* queue, uint64_t expected, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_cas_write_index_relaxed_fn(queue, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_cas_write_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_cas_write_index_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_cas_write_index_release(const hsa_queue_t* queue, uint64_t expected, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_cas_write_index_release_fn(queue, expected, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_cas_write_index_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_cas_write_index_release();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        expected,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_add_write_index_acq_rel(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_add_write_index_acq_rel_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_add_write_index_acq_rel* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_add_write_index_acq_rel();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_add_write_index_acquire(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_add_write_index_acquire_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_add_write_index_acquire* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_add_write_index_acquire();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_add_write_index_relaxed(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_add_write_index_relaxed_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_add_write_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_add_write_index_relaxed();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

uint64_t HSA_API_Trace_hsa_queue_add_write_index_release(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    uint64_t retVal = g_realHSAFunctions->hsa_queue_add_write_index_release_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_add_write_index_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_add_write_index_release();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

void HSA_API_Trace_hsa_queue_store_read_index_relaxed(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_queue_store_read_index_relaxed_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_store_read_index_relaxed* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_store_read_index_relaxed();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

void HSA_API_Trace_hsa_queue_store_read_index_release(const hsa_queue_t* queue, uint64_t value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    g_realHSAFunctions->hsa_queue_store_read_index_release_fn(queue, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_queue_store_read_index_release* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_queue_store_read_index_release();
    SpAssert(nullptr != pAPIInfo);

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        queue,
        value);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
}

hsa_status_t HSA_API_Trace_hsa_region_get_info(hsa_region_t region, hsa_region_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_region_get_info_fn(region, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_region_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_region_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        region,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_agent_iterate_regions(hsa_agent_t agent, hsa_status_t (*callback)(hsa_region_t region, void* data), void* data)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_agent_iterate_regions_fn(agent, callback, data);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_agent_iterate_regions* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_agent_iterate_regions();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        callback,
        data,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_allocate(hsa_region_t region, size_t size, void** ptr)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_allocate_fn(region, size, ptr);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_allocate* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_allocate();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        region,
        size,
        ptr,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_free(void* ptr)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_free_fn(ptr);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_free* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_free();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        ptr,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_copy(void* dst, const void* src, size_t size)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_copy_fn(dst, src, size);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_copy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_copy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        dst,
        src,
        size,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_assign_agent(void* ptr, hsa_agent_t agent, hsa_access_permission_t access)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_assign_agent_fn(ptr, agent, access);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_assign_agent* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_assign_agent();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        ptr,
        agent,
        access,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_register(void* ptr, size_t size)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_register_fn(ptr, size);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_register* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_register();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        ptr,
        size,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_memory_deregister(void* ptr, size_t size)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_memory_deregister_fn(ptr, size);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_memory_deregister* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_memory_deregister();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        ptr,
        size,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_isa_from_name(const char* name, hsa_isa_t* isa)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_isa_from_name_fn(name, isa);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_isa_from_name* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_isa_from_name();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        name,
        isa,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_isa_get_info(hsa_isa_t isa, hsa_isa_info_t attribute, uint32_t index, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_isa_get_info_fn(isa, attribute, index, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_isa_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_isa_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        isa,
        attribute,
        index,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_isa_compatible(hsa_isa_t code_object_isa, hsa_isa_t agent_isa, bool* result)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_isa_compatible_fn(code_object_isa, agent_isa, result);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_isa_compatible* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_isa_compatible();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object_isa,
        agent_isa,
        result,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_serialize(hsa_code_object_t code_object, hsa_status_t (*alloc_callback)(size_t size, hsa_callback_data_t data, void** address), hsa_callback_data_t callback_data, const char* options, void** serialized_code_object, size_t* serialized_code_object_size)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_serialize_fn(code_object, alloc_callback, callback_data, options, serialized_code_object, serialized_code_object_size);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_serialize* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_serialize();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object,
        alloc_callback,
        callback_data,
        options,
        serialized_code_object,
        serialized_code_object_size,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_deserialize(void* serialized_code_object, size_t serialized_code_object_size, const char* options, hsa_code_object_t* code_object)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_deserialize_fn(serialized_code_object, serialized_code_object_size, options, code_object);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_deserialize* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_deserialize();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        serialized_code_object,
        serialized_code_object_size,
        options,
        code_object,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_destroy(hsa_code_object_t code_object)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_destroy_fn(code_object);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_get_info(hsa_code_object_t code_object, hsa_code_object_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_get_info_fn(code_object, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_get_symbol(hsa_code_object_t code_object, const char* symbol_name, hsa_code_symbol_t* symbol)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_get_symbol_fn(code_object, symbol_name, symbol);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_get_symbol* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_get_symbol();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object,
        symbol_name,
        symbol,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_symbol_get_info(hsa_code_symbol_t code_symbol, hsa_code_symbol_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_symbol_get_info_fn(code_symbol, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_symbol_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_symbol_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_symbol,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_code_object_iterate_symbols(hsa_code_object_t code_object, hsa_status_t (*callback)(hsa_code_object_t code_object, hsa_code_symbol_t symbol, void* data), void* data)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_code_object_iterate_symbols_fn(code_object, callback, data);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_code_object_iterate_symbols* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_code_object_iterate_symbols();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        code_object,
        callback,
        data,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_create(hsa_profile_t profile, hsa_executable_state_t executable_state, const char* options, hsa_executable_t* executable)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_create_fn(profile, executable_state, options, executable);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        profile,
        executable_state,
        options,
        executable,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_destroy(hsa_executable_t executable)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_destroy_fn(executable);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_load_code_object(hsa_executable_t executable, hsa_agent_t agent, hsa_code_object_t code_object, const char* options)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_load_code_object_fn(executable, agent, code_object, options);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_load_code_object* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_load_code_object();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        agent,
        code_object,
        options,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_freeze(hsa_executable_t executable, const char* options)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_freeze_fn(executable, options);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_freeze* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_freeze();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        options,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_get_info(hsa_executable_t executable, hsa_executable_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_get_info_fn(executable, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_global_variable_define(hsa_executable_t executable, const char* variable_name, void* address)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_global_variable_define_fn(executable, variable_name, address);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_global_variable_define* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_global_variable_define();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        variable_name,
        address,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_agent_global_variable_define(hsa_executable_t executable, hsa_agent_t agent, const char* variable_name, void* address)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_agent_global_variable_define_fn(executable, agent, variable_name, address);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_agent_global_variable_define* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_agent_global_variable_define();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        agent,
        variable_name,
        address,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_readonly_variable_define(hsa_executable_t executable, hsa_agent_t agent, const char* variable_name, void* address)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_readonly_variable_define_fn(executable, agent, variable_name, address);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_readonly_variable_define* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_readonly_variable_define();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        agent,
        variable_name,
        address,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_validate(hsa_executable_t executable, uint32_t* result)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_validate_fn(executable, result);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_validate* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_validate();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        result,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_get_symbol(hsa_executable_t executable, const char* module_name, const char* symbol_name, hsa_agent_t agent, int32_t call_convention, hsa_executable_symbol_t* symbol)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_get_symbol_fn(executable, module_name, symbol_name, agent, call_convention, symbol);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_get_symbol* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_get_symbol();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        module_name,
        symbol_name,
        agent,
        call_convention,
        symbol,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);
    HSA_APITrace_hsa_executable_get_symbol_PostCallHelper(retVal, executable, module_name, symbol_name, agent, call_convention, symbol);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_symbol_get_info(hsa_executable_symbol_t executable_symbol, hsa_executable_symbol_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_symbol_get_info_fn(executable_symbol, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_symbol_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_symbol_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable_symbol,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_executable_iterate_symbols(hsa_executable_t executable, hsa_status_t (*callback)(hsa_executable_t executable, hsa_executable_symbol_t symbol, void* data), void* data)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAFunctions->hsa_executable_iterate_symbols_fn(executable, callback, data);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_executable_iterate_symbols* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_executable_iterate_symbols();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        executable,
        callback,
        data,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_create(hsa_machine_model_t machine_model, hsa_profile_t profile, hsa_default_float_rounding_mode_t default_float_rounding_mode, const char* options, hsa_ext_program_t* program)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_create_fn(machine_model, profile, default_float_rounding_mode, options, program);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        machine_model,
        profile,
        default_float_rounding_mode,
        options,
        program,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_destroy(hsa_ext_program_t program)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_destroy_fn(program);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        program,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_add_module(hsa_ext_program_t program, hsa_ext_module_t module)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_add_module_fn(program, module);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_add_module* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_add_module();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        program,
        module,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_iterate_modules(hsa_ext_program_t program, hsa_status_t (*callback)(hsa_ext_program_t program, hsa_ext_module_t module, void* data), void* data)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_iterate_modules_fn(program, callback, data);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_iterate_modules* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_iterate_modules();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        program,
        callback,
        data,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_get_info(hsa_ext_program_t program, hsa_ext_program_info_t attribute, void* value)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_get_info_fn(program, attribute, value);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        program,
        attribute,
        value,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_program_finalize(hsa_ext_program_t program, hsa_isa_t isa, int32_t call_convention, hsa_ext_control_directives_t control_directives, const char* options, hsa_code_object_type_t code_object_type, hsa_code_object_t* code_object)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_program_finalize_fn(program, isa, call_convention, control_directives, options, code_object_type, code_object);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_program_finalize* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_program_finalize();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        program,
        isa,
        call_convention,
        control_directives,
        options,
        code_object_type,
        code_object,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_get_capability(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t* image_format, uint32_t* capability_mask)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_get_capability_fn(agent, geometry, image_format, capability_mask);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_get_capability* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_get_capability();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        geometry,
        image_format,
        capability_mask,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_data_get_info(hsa_agent_t agent, const hsa_ext_image_descriptor_t* image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_info_t* image_data_info)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_data_get_info_fn(agent, image_descriptor, access_permission, image_data_info);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_data_get_info* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_data_get_info();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        image_descriptor,
        access_permission,
        image_data_info,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_create(hsa_agent_t agent, const hsa_ext_image_descriptor_t* image_descriptor, const void* image_data, hsa_access_permission_t access_permission, hsa_ext_image_t* image)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_create_fn(agent, image_descriptor, image_data, access_permission, image);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        image_descriptor,
        image_data,
        access_permission,
        image,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_destroy(hsa_agent_t agent, hsa_ext_image_t image)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_destroy_fn(agent, image);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        image,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_copy(hsa_agent_t agent, hsa_ext_image_t src_image, const hsa_dim3_t* src_offset, hsa_ext_image_t dst_image, const hsa_dim3_t* dst_offset, const hsa_dim3_t* range)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_copy_fn(agent, src_image, src_offset, dst_image, dst_offset, range);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_copy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_copy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        src_image,
        src_offset,
        dst_image,
        dst_offset,
        range,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_import(hsa_agent_t agent, const void* src_memory, size_t src_row_pitch, size_t src_slice_pitch, hsa_ext_image_t dst_image, const hsa_ext_image_region_t* image_region)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_import_fn(agent, src_memory, src_row_pitch, src_slice_pitch, dst_image, image_region);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_import* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_import();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        src_memory,
        src_row_pitch,
        src_slice_pitch,
        dst_image,
        image_region,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_export(hsa_agent_t agent, hsa_ext_image_t src_image, void* dst_memory, size_t dst_row_pitch, size_t dst_slice_pitch, const hsa_ext_image_region_t* image_region)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_export_fn(agent, src_image, dst_memory, dst_row_pitch, dst_slice_pitch, image_region);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_export* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_export();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        src_image,
        dst_memory,
        dst_row_pitch,
        dst_slice_pitch,
        image_region,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_image_clear(hsa_agent_t agent, hsa_ext_image_t image, const void* data, const hsa_ext_image_region_t* image_region)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_image_clear_fn(agent, image, data, image_region);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_image_clear* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_image_clear();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        image,
        data,
        image_region,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_sampler_create(hsa_agent_t agent, const hsa_ext_sampler_descriptor_t* sampler_descriptor, hsa_ext_sampler_t* sampler)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_sampler_create_fn(agent, sampler_descriptor, sampler);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_sampler_create* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_sampler_create();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        sampler_descriptor,
        sampler,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

hsa_status_t HSA_API_Trace_hsa_ext_sampler_destroy(hsa_agent_t agent, hsa_ext_sampler_t sampler)
{
    ULONGLONG ullStart = OSUtils::Instance()->GetTimeNanos();
    hsa_status_t retVal = g_realHSAExtFunctions->hsa_ext_sampler_destroy_fn(agent, sampler);
    ULONGLONG ullEnd = OSUtils::Instance()->GetTimeNanos();

    HSA_APITrace_hsa_ext_sampler_destroy* pAPIInfo = new(std::nothrow) HSA_APITrace_hsa_ext_sampler_destroy();
    SpAssertRet(nullptr != pAPIInfo) retVal;

    pAPIInfo->Create(
        ullStart,
        ullEnd,
        agent,
        sampler,
        retVal);

    RECORD_STACK_TRACE_FOR_API(pAPIInfo);
    HSAAPIInfoManager::Instance()->AddAPIInfoEntry(pAPIInfo);

    return retVal;
}

void InitHSAAPIInterceptTrace(ApiTable* pTable)
{
    g_realHSAFunctions = (ApiTable*)malloc(sizeof(ApiTable));
    memcpy(g_realHSAFunctions, pTable, sizeof(ApiTable));

    g_realHSAExtFunctions = (ExtTable*)malloc(sizeof(ExtTable));
    memcpy(g_realHSAExtFunctions, pTable->std_exts_, sizeof(ExtTable));

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_status_string))
    {
        pTable->hsa_status_string_fn = HSA_API_Trace_hsa_status_string;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_init))
    {
        pTable->hsa_init_fn = HSA_API_Trace_hsa_init;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_shut_down))
    {
        pTable->hsa_shut_down_fn = HSA_API_Trace_hsa_shut_down;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_system_get_info))
    {
        pTable->hsa_system_get_info_fn = HSA_API_Trace_hsa_system_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_system_extension_supported))
    {
        pTable->hsa_system_extension_supported_fn = HSA_API_Trace_hsa_system_extension_supported;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_system_get_extension_table))
    {
        pTable->hsa_system_get_extension_table_fn = HSA_API_Trace_hsa_system_get_extension_table;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_agent_get_info))
    {
        pTable->hsa_agent_get_info_fn = HSA_API_Trace_hsa_agent_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_iterate_agents))
    {
        pTable->hsa_iterate_agents_fn = HSA_API_Trace_hsa_iterate_agents;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_agent_get_exception_policies))
    {
        pTable->hsa_agent_get_exception_policies_fn = HSA_API_Trace_hsa_agent_get_exception_policies;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_agent_extension_supported))
    {
        pTable->hsa_agent_extension_supported_fn = HSA_API_Trace_hsa_agent_extension_supported;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_create))
    {
        pTable->hsa_signal_create_fn = HSA_API_Trace_hsa_signal_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_destroy))
    {
        pTable->hsa_signal_destroy_fn = HSA_API_Trace_hsa_signal_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_load_acquire))
    {
        pTable->hsa_signal_load_acquire_fn = HSA_API_Trace_hsa_signal_load_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_load_relaxed))
    {
        pTable->hsa_signal_load_relaxed_fn = HSA_API_Trace_hsa_signal_load_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_store_relaxed))
    {
        pTable->hsa_signal_store_relaxed_fn = HSA_API_Trace_hsa_signal_store_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_store_release))
    {
        pTable->hsa_signal_store_release_fn = HSA_API_Trace_hsa_signal_store_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_exchange_acq_rel))
    {
        pTable->hsa_signal_exchange_acq_rel_fn = HSA_API_Trace_hsa_signal_exchange_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_exchange_acquire))
    {
        pTable->hsa_signal_exchange_acquire_fn = HSA_API_Trace_hsa_signal_exchange_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_exchange_relaxed))
    {
        pTable->hsa_signal_exchange_relaxed_fn = HSA_API_Trace_hsa_signal_exchange_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_exchange_release))
    {
        pTable->hsa_signal_exchange_release_fn = HSA_API_Trace_hsa_signal_exchange_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_cas_acq_rel))
    {
        pTable->hsa_signal_cas_acq_rel_fn = HSA_API_Trace_hsa_signal_cas_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_cas_acquire))
    {
        pTable->hsa_signal_cas_acquire_fn = HSA_API_Trace_hsa_signal_cas_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_cas_relaxed))
    {
        pTable->hsa_signal_cas_relaxed_fn = HSA_API_Trace_hsa_signal_cas_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_cas_release))
    {
        pTable->hsa_signal_cas_release_fn = HSA_API_Trace_hsa_signal_cas_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_add_acq_rel))
    {
        pTable->hsa_signal_add_acq_rel_fn = HSA_API_Trace_hsa_signal_add_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_add_acquire))
    {
        pTable->hsa_signal_add_acquire_fn = HSA_API_Trace_hsa_signal_add_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_add_relaxed))
    {
        pTable->hsa_signal_add_relaxed_fn = HSA_API_Trace_hsa_signal_add_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_add_release))
    {
        pTable->hsa_signal_add_release_fn = HSA_API_Trace_hsa_signal_add_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_subtract_acq_rel))
    {
        pTable->hsa_signal_subtract_acq_rel_fn = HSA_API_Trace_hsa_signal_subtract_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_subtract_acquire))
    {
        pTable->hsa_signal_subtract_acquire_fn = HSA_API_Trace_hsa_signal_subtract_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_subtract_relaxed))
    {
        pTable->hsa_signal_subtract_relaxed_fn = HSA_API_Trace_hsa_signal_subtract_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_subtract_release))
    {
        pTable->hsa_signal_subtract_release_fn = HSA_API_Trace_hsa_signal_subtract_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_and_acq_rel))
    {
        pTable->hsa_signal_and_acq_rel_fn = HSA_API_Trace_hsa_signal_and_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_and_acquire))
    {
        pTable->hsa_signal_and_acquire_fn = HSA_API_Trace_hsa_signal_and_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_and_relaxed))
    {
        pTable->hsa_signal_and_relaxed_fn = HSA_API_Trace_hsa_signal_and_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_and_release))
    {
        pTable->hsa_signal_and_release_fn = HSA_API_Trace_hsa_signal_and_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_or_acq_rel))
    {
        pTable->hsa_signal_or_acq_rel_fn = HSA_API_Trace_hsa_signal_or_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_or_acquire))
    {
        pTable->hsa_signal_or_acquire_fn = HSA_API_Trace_hsa_signal_or_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_or_relaxed))
    {
        pTable->hsa_signal_or_relaxed_fn = HSA_API_Trace_hsa_signal_or_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_or_release))
    {
        pTable->hsa_signal_or_release_fn = HSA_API_Trace_hsa_signal_or_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_xor_acq_rel))
    {
        pTable->hsa_signal_xor_acq_rel_fn = HSA_API_Trace_hsa_signal_xor_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_xor_acquire))
    {
        pTable->hsa_signal_xor_acquire_fn = HSA_API_Trace_hsa_signal_xor_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_xor_relaxed))
    {
        pTable->hsa_signal_xor_relaxed_fn = HSA_API_Trace_hsa_signal_xor_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_xor_release))
    {
        pTable->hsa_signal_xor_release_fn = HSA_API_Trace_hsa_signal_xor_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_wait_acquire))
    {
        pTable->hsa_signal_wait_acquire_fn = HSA_API_Trace_hsa_signal_wait_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_signal_wait_relaxed))
    {
        pTable->hsa_signal_wait_relaxed_fn = HSA_API_Trace_hsa_signal_wait_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_create))
    {
        pTable->hsa_queue_create_fn = HSA_API_Trace_hsa_queue_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_soft_queue_create))
    {
        pTable->hsa_soft_queue_create_fn = HSA_API_Trace_hsa_soft_queue_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_destroy))
    {
        pTable->hsa_queue_destroy_fn = HSA_API_Trace_hsa_queue_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_inactivate))
    {
        pTable->hsa_queue_inactivate_fn = HSA_API_Trace_hsa_queue_inactivate;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_load_read_index_acquire))
    {
        pTable->hsa_queue_load_read_index_acquire_fn = HSA_API_Trace_hsa_queue_load_read_index_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_load_read_index_relaxed))
    {
        pTable->hsa_queue_load_read_index_relaxed_fn = HSA_API_Trace_hsa_queue_load_read_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_load_write_index_acquire))
    {
        pTable->hsa_queue_load_write_index_acquire_fn = HSA_API_Trace_hsa_queue_load_write_index_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_load_write_index_relaxed))
    {
        pTable->hsa_queue_load_write_index_relaxed_fn = HSA_API_Trace_hsa_queue_load_write_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_store_write_index_relaxed))
    {
        pTable->hsa_queue_store_write_index_relaxed_fn = HSA_API_Trace_hsa_queue_store_write_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_store_write_index_release))
    {
        pTable->hsa_queue_store_write_index_release_fn = HSA_API_Trace_hsa_queue_store_write_index_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_cas_write_index_acq_rel))
    {
        pTable->hsa_queue_cas_write_index_acq_rel_fn = HSA_API_Trace_hsa_queue_cas_write_index_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_cas_write_index_acquire))
    {
        pTable->hsa_queue_cas_write_index_acquire_fn = HSA_API_Trace_hsa_queue_cas_write_index_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_cas_write_index_relaxed))
    {
        pTable->hsa_queue_cas_write_index_relaxed_fn = HSA_API_Trace_hsa_queue_cas_write_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_cas_write_index_release))
    {
        pTable->hsa_queue_cas_write_index_release_fn = HSA_API_Trace_hsa_queue_cas_write_index_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_add_write_index_acq_rel))
    {
        pTable->hsa_queue_add_write_index_acq_rel_fn = HSA_API_Trace_hsa_queue_add_write_index_acq_rel;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_add_write_index_acquire))
    {
        pTable->hsa_queue_add_write_index_acquire_fn = HSA_API_Trace_hsa_queue_add_write_index_acquire;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_add_write_index_relaxed))
    {
        pTable->hsa_queue_add_write_index_relaxed_fn = HSA_API_Trace_hsa_queue_add_write_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_add_write_index_release))
    {
        pTable->hsa_queue_add_write_index_release_fn = HSA_API_Trace_hsa_queue_add_write_index_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_store_read_index_relaxed))
    {
        pTable->hsa_queue_store_read_index_relaxed_fn = HSA_API_Trace_hsa_queue_store_read_index_relaxed;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_queue_store_read_index_release))
    {
        pTable->hsa_queue_store_read_index_release_fn = HSA_API_Trace_hsa_queue_store_read_index_release;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_region_get_info))
    {
        pTable->hsa_region_get_info_fn = HSA_API_Trace_hsa_region_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_agent_iterate_regions))
    {
        pTable->hsa_agent_iterate_regions_fn = HSA_API_Trace_hsa_agent_iterate_regions;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_allocate))
    {
        pTable->hsa_memory_allocate_fn = HSA_API_Trace_hsa_memory_allocate;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_free))
    {
        pTable->hsa_memory_free_fn = HSA_API_Trace_hsa_memory_free;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_copy))
    {
        pTable->hsa_memory_copy_fn = HSA_API_Trace_hsa_memory_copy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_assign_agent))
    {
        pTable->hsa_memory_assign_agent_fn = HSA_API_Trace_hsa_memory_assign_agent;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_register))
    {
        pTable->hsa_memory_register_fn = HSA_API_Trace_hsa_memory_register;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_memory_deregister))
    {
        pTable->hsa_memory_deregister_fn = HSA_API_Trace_hsa_memory_deregister;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_isa_from_name))
    {
        pTable->hsa_isa_from_name_fn = HSA_API_Trace_hsa_isa_from_name;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_isa_get_info))
    {
        pTable->hsa_isa_get_info_fn = HSA_API_Trace_hsa_isa_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_isa_compatible))
    {
        pTable->hsa_isa_compatible_fn = HSA_API_Trace_hsa_isa_compatible;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_serialize))
    {
        pTable->hsa_code_object_serialize_fn = HSA_API_Trace_hsa_code_object_serialize;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_deserialize))
    {
        pTable->hsa_code_object_deserialize_fn = HSA_API_Trace_hsa_code_object_deserialize;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_destroy))
    {
        pTable->hsa_code_object_destroy_fn = HSA_API_Trace_hsa_code_object_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_get_info))
    {
        pTable->hsa_code_object_get_info_fn = HSA_API_Trace_hsa_code_object_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_get_symbol))
    {
        pTable->hsa_code_object_get_symbol_fn = HSA_API_Trace_hsa_code_object_get_symbol;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_symbol_get_info))
    {
        pTable->hsa_code_symbol_get_info_fn = HSA_API_Trace_hsa_code_symbol_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_code_object_iterate_symbols))
    {
        pTable->hsa_code_object_iterate_symbols_fn = HSA_API_Trace_hsa_code_object_iterate_symbols;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_create))
    {
        pTable->hsa_executable_create_fn = HSA_API_Trace_hsa_executable_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_destroy))
    {
        pTable->hsa_executable_destroy_fn = HSA_API_Trace_hsa_executable_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_load_code_object))
    {
        pTable->hsa_executable_load_code_object_fn = HSA_API_Trace_hsa_executable_load_code_object;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_freeze))
    {
        pTable->hsa_executable_freeze_fn = HSA_API_Trace_hsa_executable_freeze;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_get_info))
    {
        pTable->hsa_executable_get_info_fn = HSA_API_Trace_hsa_executable_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_global_variable_define))
    {
        pTable->hsa_executable_global_variable_define_fn = HSA_API_Trace_hsa_executable_global_variable_define;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_agent_global_variable_define))
    {
        pTable->hsa_executable_agent_global_variable_define_fn = HSA_API_Trace_hsa_executable_agent_global_variable_define;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_readonly_variable_define))
    {
        pTable->hsa_executable_readonly_variable_define_fn = HSA_API_Trace_hsa_executable_readonly_variable_define;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_validate))
    {
        pTable->hsa_executable_validate_fn = HSA_API_Trace_hsa_executable_validate;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_get_symbol))
    {
        pTable->hsa_executable_get_symbol_fn = HSA_API_Trace_hsa_executable_get_symbol;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_symbol_get_info))
    {
        pTable->hsa_executable_symbol_get_info_fn = HSA_API_Trace_hsa_executable_symbol_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_executable_iterate_symbols))
    {
        pTable->hsa_executable_iterate_symbols_fn = HSA_API_Trace_hsa_executable_iterate_symbols;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_create))
    {
        pTable->std_exts_->hsa_ext_program_create_fn = HSA_API_Trace_hsa_ext_program_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_destroy))
    {
        pTable->std_exts_->hsa_ext_program_destroy_fn = HSA_API_Trace_hsa_ext_program_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_add_module))
    {
        pTable->std_exts_->hsa_ext_program_add_module_fn = HSA_API_Trace_hsa_ext_program_add_module;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_iterate_modules))
    {
        pTable->std_exts_->hsa_ext_program_iterate_modules_fn = HSA_API_Trace_hsa_ext_program_iterate_modules;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_get_info))
    {
        pTable->std_exts_->hsa_ext_program_get_info_fn = HSA_API_Trace_hsa_ext_program_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_program_finalize))
    {
        pTable->std_exts_->hsa_ext_program_finalize_fn = HSA_API_Trace_hsa_ext_program_finalize;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_get_capability))
    {
        pTable->std_exts_->hsa_ext_image_get_capability_fn = HSA_API_Trace_hsa_ext_image_get_capability;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_data_get_info))
    {
        pTable->std_exts_->hsa_ext_image_data_get_info_fn = HSA_API_Trace_hsa_ext_image_data_get_info;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_create))
    {
        pTable->std_exts_->hsa_ext_image_create_fn = HSA_API_Trace_hsa_ext_image_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_destroy))
    {
        pTable->std_exts_->hsa_ext_image_destroy_fn = HSA_API_Trace_hsa_ext_image_destroy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_copy))
    {
        pTable->std_exts_->hsa_ext_image_copy_fn = HSA_API_Trace_hsa_ext_image_copy;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_import))
    {
        pTable->std_exts_->hsa_ext_image_import_fn = HSA_API_Trace_hsa_ext_image_import;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_export))
    {
        pTable->std_exts_->hsa_ext_image_export_fn = HSA_API_Trace_hsa_ext_image_export;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_image_clear))
    {
        pTable->std_exts_->hsa_ext_image_clear_fn = HSA_API_Trace_hsa_ext_image_clear;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_sampler_create))
    {
        pTable->std_exts_->hsa_ext_sampler_create_fn = HSA_API_Trace_hsa_ext_sampler_create;
    }

    if (HSAAPIInfoManager::Instance()->ShouldIntercept(HSA_API_Type_hsa_ext_sampler_destroy))
    {
        pTable->std_exts_->hsa_ext_sampler_destroy_fn = HSA_API_Trace_hsa_ext_sampler_destroy;
    }

}

void DoneHSAAPIInterceptTrace()
{
    free(g_realHSAFunctions);
    free(g_realHSAExtFunctions);
}


