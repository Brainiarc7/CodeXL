import os

###############################################################################
# Delete a file from the VulkanServer folder
def DeleteFile(file, rootFolder):
    command = "rm -f "
    command = command + rootFolder
    command = command + "/Server/VulkanServer/"
    command = command + file
    os.system(command)

###############################################################################
# Method to clean up the temporary shared source files
def VulkanCleanup(target, source, env):
    for file in commonSources:
        DeleteFile(file, env.rootFolder)

    for file in headers:
        DeleteFile(file, env.rootFolder)
    return None

###############################################################################
# Main scons build file for VulkanServer

Import('GPS_env')
env = GPS_env.Clone()
env['CPPPATH'] = env['GPS_PATH']
env.Prepend (CPPPATH =
[
    '../Common/Linux',
    '../../../Common/Lib/Ext/tinyxml/2.6.2',
    '../../../Common/Lib/Ext/VulkanSDK/1.0.8.0/Include',
    '../../../Common/Lib/Ext/VulkanSDK/1.0.8.0/Include/vulkan',
    '../../../Common/Lib/Ext/VulkanSDK/1.0.8.0/glslang/SPIRV'
])
env.Prepend (LIBPATH = env['GPS_LIBPATH'])
env.Prepend(CCFLAGS =
[
    '-Wall',
    '-Wextra',

    "-D'LOG_MODULE=\"VulkanServer\"'"
])

# These need to be in their dependency order, with most derived first
env['LIBS'] = \
[
    #local libraries
    "libCommon",
    "libAMDTOSWrappers",
    "libAMDTBaseTools",
    "libDDS",
    "libJpg",
    "libPng",
    "libZlib",               #used by PNG
    #boost
    File('../../../Common/Lib/Ext/Boost/boost_1_55_0/lib/RHEL6/' + env.extConfig + '/libboost_system.a'),
    #external libraries
    "dl",
    "rt",
    "pthread",
    "libX11",
]

# Header files needed
headers = \
[
]

# Common source files
commonSources = \
[
]

# Vulkan specific source files
sources = \
[
# common sources
#    "../Common/MultithreadedTraceAnalyzerLayer.cpp",
#    "../Common/WrappedObjectDatabase.cpp",
#    "../Common/ObjectDatabaseProcessor.cpp",

# LunarG sources
    "LunarG/vk_layer_extension_utils.cpp",
    "LunarG/vk_layer_table.cpp",

# VKT sources
    "VKT/FrameDebugger/vktFrameDebuggerLayer.cpp",

    "VKT/Interception/vktIntercept.cpp",

    "VTK/Objects/Wrappers/vktWrappedCmdBuf.cpp",
    "VTK/Objects/Wrappers/vktWrappedObject.cpp",
    "VTK/Objects/Wrappers/vktWrappedQueue.cpp",
    "VKT/Objects/vktInstanceBase.cpp",
    "VKT/Objects/vktWrappedObjectDatabase.cpp",
    "VKT/Objects/vktObjectDatabaseProcessor.cpp",

    "VKT/Profiling/vktCmdBufProfiler.cpp",
    "VKT/Profiling/vktFrameProfilerLayer.cpp",

    "VKT/Rendering/vktImageRenderer.cpp",

    "VKT/Tracing/vktAPIEntry.cpp",
    "VKT/Tracing/vktThreadTraceData.cpp",
    "VKT/Tracing/TraceAnalyzerLayer.cpp",

    "VKT/Util/vktUtil.cpp",

    "VKT/vktInterceptManager.cpp",
    "VKT/vktLayerManager.cpp",
    "VKT/vktPlugin.cpp",
]

# build the VulkanServer shared library
VulkanServer = env.SharedLibrary('VulkanServer', sources)

# clean up the source files when everything is built
env.Command( 'done', 'libVulkanServer.so', VulkanCleanup )

Return('VulkanServer')

